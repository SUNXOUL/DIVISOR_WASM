@page "/Students"
@inject IStudentService StudentService

<div class="form-control border-0">
    <input type="text" class="form-control" @oninput=@(args => OnChange(args.Value.ToString())) placeholder="Search">
    <br>
    <H2 class="d-flex justify-content-center">STUDENTS</H2>
    <div class="d-flex align-items-center">
        <button type="button" data-bs-toggle="modal" data-bs-target="#myModal" class="btn btn-primary rounded-pill m-1 ">New</button>
    </div>
</div>

<!-- The Modal -->
<div class="modal" id="myModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <EditForm Model="student" OnValidSubmit="() => Save()">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h4 class="modal-title">Add Student</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">

                    <div class="mb-3">
                        <label>Name</label>
                        <InputText @bind-Value="student.Name" class="form-control" />
                        <ValidationMessage For="@(() => student.Name)" />
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn  d-flex btn-success">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<hr />
<div class="form-control border-0 d-flex flex-wrap">
    @foreach(var student in StudentService.StudentList )
    {
        if(student.Name.ToLower().Contains(Search.ToLower())){
            <div class="p-1 border-1">
                <h5><span class="badge border border-gray text-body ">@student.Name <button class="bg-transparent border-0 text-body" @onclick="@(()=>Delete(@student.StudentId))">X</button></span></h5>
            </div>
        }
    }
    
</div>

@code{
    public Student student {get;set;} = new Student();
    public string Search {get;set;} = "";
    protected override async Task OnInitializedAsync()
    {
        await StudentService.GetList();
    }

    public async Task Save()
    {
        await StudentService.Save(student);
        New();
        await StudentService.GetList();
    }

    public void New()
    {
        student = new Student();
    }

    void OnChange(string value)
    {
        Search=value;
    }

    public async Task Delete(int StudentId)
    {
        await StudentService.Delete(StudentId);
        await StudentService.GetList();
    }

}

